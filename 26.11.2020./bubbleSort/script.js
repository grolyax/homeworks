// сравниваем соседние пары  по порядку на "кто больше", кто больше того двигаем вправо (меняем местами), если левый не больше правого, то переходим к следующей паре. Когда дошли до конца массива, начинаем сначала, и так, пока за прохождение массива не произойдёт ни одной перестановки. на этом цикл прекращается.

function sortBubble(arr) {  // создаём функцию по сортировке массива
    var tmp; // вводим временную величину
  
    for (var i = arr.length - 1; i > 0; i--) {  // начинаем цикл с переменными (объявляем переменную i (индекс), присваиваем ей значение на один меньше всего колличества элементов в массиве (то есть индекс самого последнего элемента в массиве); условие, что i должно быть больше 0; итеракция  i уменьшаем на 1). то есть мы определяем место, которое займёт найденный элемент с последнего, дальше предпоследнее, потом предпредпоследнее и т.д.  
        for (var j = 0; j < i; j++) {           // внутри цикла запускаем ещё один цикл, в котором переменной j (тоже индекс) присваиваем 0, при условии, что j < i, выполняем итерацию j плюс 1 (то есть поочерёдно с первого элемента начнём сравнивать пары)
            if (arr[j] > arr[j+1]) {            // условие: если, значение элемента с индексом j  больше чем значение следующего за ним элемента (индекс j+1), то выполняется
                tmp = arr[j];                   // мы запоминаем во временной переменной значение сравниваемого элемента, тем самым как бы освобождая его значение
                arr[j] = arr[j+1];              // в освободившееся значение подставляем (присваиваем) значение следующего, который меньше - т.е. двигаем, тем самым освобождая его ячейку
                arr[j+1] = tmp;                 // и в освободившуюся ячейку из временного вставляем больший элемент, таким образом произошла замена местами, а tmp выступает окошком для "пересидки", пока ставят нужный на его правильное место
            }
        }
    }
    return arr;                                 // возвращаем отсортированный массив
}
